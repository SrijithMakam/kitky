CREATE OR REPLACE PROCEDURE ADD_ORDER_TRACKING (
    PI_ORDER_ID ORDER_TRACKING.ORDER_ID%TYPE,
    PI_ORDER_STATUS ORDER_TRACKING.ORDER_STATUS%TYPE
) AS
    E_ORDER_STATUS_CHECK EXCEPTION;
    E_ORDER_ID_CHECK EXCEPTION;
    V_COUNT_ORDER_ID NUMBER;
BEGIN
    IF PI_ORDER_STATUS NOT IN ('INITIAL', 'MATCHING_DRIVER', 'DRIVER_MATCHED', 'PLACED', 'PICKED', 'DELIVERED', 'CANCELLED') THEN
        RAISE E_ORDER_STATUS_CHECK;
    END IF;
    
    SELECT COUNT(ORDER_ID) INTO V_COUNT_ORDER_ID FROM ORDERS WHERE ORDER_ID = PI_ORDER_ID;
    IF V_COUNT_ORDER_ID = 0 THEN
        RAISE E_ORDER_ID_CHECK;
    END IF;
    
    INSERT INTO ORDER_TRACKING VALUES (
        TRACKING_SEQ.NEXTVAL,
        UPPER(PI_ORDER_STATUS),
        SYSTIMESTAMP,
        PI_ORDER_ID
    );
    
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('ORDER TRACKING ADDED SUCCESSFULLY');
EXCEPTION
    WHEN E_ORDER_STATUS_CHECK THEN
        DBMS_OUTPUT.PUT_LINE('PLEASE ENTER A VALID ORDER STATUS');
    WHEN E_ORDER_ID_CHECK THEN
        DBMS_OUTPUT.PUT_LINE('ORDER DOES NOT EXISTS');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END ADD_ORDER_TRACKING;
/