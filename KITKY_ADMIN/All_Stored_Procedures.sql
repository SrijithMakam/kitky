SET SERVEROUTPUT ON;
-- Stored procedure to add customers
CREATE OR REPLACE PROCEDURE ADD_CUSTOMER (
    PI_CONTACT_NO CUSTOMER.CONTACT_NO%TYPE,
    PI_FIRST_NAME CUSTOMER.FIRST_NAME%TYPE,
    PI_LAST_NAME CUSTOMER.LAST_NAME%TYPE,
    PI_PASSWORD CUSTOMER.PASSWORD%TYPE,
    PI_EMAIL CUSTOMER.EMAIL%TYPE
) AS 
    E_CONTACT_NO_LENGTH EXCEPTION;
    E_CONTACT_NO_EXISTS EXCEPTION;
    E_EMAIL_EXISTS EXCEPTION;
    E_PASSWORD_VALID EXCEPTION;
    
    V_CONTACT_NOS NUMBER;
    V_EMAIL_IDS NUMBER;
BEGIN
    IF LENGTH(PI_CONTACT_NO) != 10 THEN
        RAISE E_CONTACT_NO_LENGTH;
    END IF;
    
    IF LENGTH(PI_PASSWORD) < 8 THEN
        RAISE E_PASSWORD_VALID;
    END IF;
    
    SELECT COUNT(CUST_ID) INTO V_CONTACT_NOS FROM CUSTOMER WHERE CONTACT_NO = PI_CONTACT_NO;
    IF V_CONTACT_NOS > 0 THEN
        RAISE E_CONTACT_NO_EXISTS;
    END IF;
    
    SELECT COUNT(CUST_ID) INTO V_EMAIL_IDS FROM CUSTOMER WHERE EMAIL = LOWER(PI_EMAIL);
    IF V_EMAIL_IDS > 0 THEN
        RAISE E_EMAIL_EXISTS;
    END IF;
    
    INSERT INTO CUSTOMER VALUES (
        CUST_SEQ.NEXTVAL, 
        PI_CONTACT_NO, 
        INITCAP(PI_FIRST_NAME),
        INITCAP(PI_LAST_NAME),
        PI_PASSWORD,
        LOWER(PI_EMAIL)
    );
    
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('CUSTOMER ADDED SUCCESSFULLY');
EXCEPTION
    WHEN E_PASSWORD_VALID THEN
        DBMS_OUTPUT.PUT_LINE('PASSWORD SHOULD HAVE AT LEAST 8 CHARACTERS');
    WHEN E_EMAIL_EXISTS THEN
        DBMS_OUTPUT.PUT_LINE('EMAIL ID ALREADY EXISTS. PLEASE SIGN-IN DIRECTLTY');
    WHEN E_CONTACT_NO_EXISTS THEN
        DBMS_OUTPUT.PUT_LINE('CONTACT NO ALREADY EXISTS. PLEASE SIGN-IN DIRECTLY');
    WHEN E_CONTACT_NO_LENGTH THEN
        DBMS_OUTPUT.PUT_LINE('PLEASE INPUT VALID CONTACT NUMBER');
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END ADD_CUSTOMER;
/


-- Stored Procedure to add saved addresses

create or replace procedure ADD_SAVED_ADDRESSES(
    ADDRESS_NAME varchar,
    STREET_ADDRESS varchar,
    CITY varchar,
    STATE varchar,
    ZIP_CODE number,
    V_CONTACT_NO number
)
AS
    V_CUST_ID NUMBER;
begin
    SELECT CUST_ID INTO V_CUST_ID FROM CUSTOMER WHERE CONTACT_NO = V_CONTACT_NO;

    INSERT INTO SAVED_ADDRESSES VALUES(
        SAVED_ADDR_SEQ.NEXTVAL,
        INITCAP(ADDRESS_NAME), 
        INITCAP(STREET_ADDRESS), 
        INITCAP(CITY), 
        INITCAP(STATE), 
        ZIP_CODE, 
        V_CUST_ID
    );
    
    commit;
    DBMS_OUTPUT.PUT_LINE('SAVED_ADDRESS Added');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Customer not found');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
end ADD_SAVED_ADDRESSES;
/

--Stored procedure to add delivery agent

CREATE OR REPLACE PROCEDURE ADD_DELIVERY_AGENT (
    PI_FIRST_NAME DELIVERY_AGENT.FIRST_NAME%TYPE,
    PI_LAST_NAME DELIVERY_AGENT.LAST_NAME%TYPE,
    PI_PASSWORD DELIVERY_AGENT.PASSWORD%TYPE,
    PI_EMAIL DELIVERY_AGENT.EMAIL%TYPE,
    PI_CONTACT_NO DELIVERY_AGENT.CONTACT_NO%TYPE,
    PI_STREET_ADDRESS DELIVERY_AGENT.STREET_ADDRESS%TYPE,
    PI_CITY DELIVERY_AGENT.CITY%TYPE,
    PI_STATE DELIVERY_AGENT.STATE%TYPE,
    PI_ZIP_CODE DELIVERY_AGENT.ZIP_CODE%TYPE
) AS
    E_CONTACT_NO_LENGTH EXCEPTION;
    E_CONTACT_NO_EXISTS EXCEPTION;
    E_EMAIL_EXISTS EXCEPTION;
    E_PASSWORD_VALID EXCEPTION;

    V_CONTACT_NOS NUMBER;
    V_EMAIL_IDS NUMBER;
BEGIN
    IF LENGTH(PI_CONTACT_NO) != 10 THEN
        RAISE E_CONTACT_NO_LENGTH;
    END IF;

    IF LENGTH(PI_PASSWORD) < 8 THEN
        RAISE E_PASSWORD_VALID;
    END IF;

    SELECT COUNT(AGENT_ID) INTO V_CONTACT_NOS FROM DELIVERY_AGENT WHERE CONTACT_NO = PI_CONTACT_NO;
    IF V_CONTACT_NOS > 0 THEN
        RAISE E_CONTACT_NO_EXISTS;
    END IF;

    SELECT COUNT(AGENT_ID) INTO V_EMAIL_IDS FROM DELIVERY_AGENT WHERE EMAIL = LOWER(PI_EMAIL);
    IF V_EMAIL_IDS > 0 THEN
        RAISE E_EMAIL_EXISTS;
    END IF;

    INSERT INTO DELIVERY_AGENT VALUES (
        DELIVERY_AGENT_SEQ.NEXTVAL,
        INITCAP(PI_FIRST_NAME),
        INITCAP(PI_LAST_NAME),
        PI_PASSWORD,
        LOWER(PI_EMAIL),
        PI_CONTACT_NO,
        INITCAP(PI_STREET_ADDRESS),
        INITCAP(PI_CITY),
        INITCAP(PI_STATE),
        INITCAP(PI_ZIP_CODE)
    );

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DELIVERY AGENT ADDED SUCCESSFULLY');
EXCEPTION
    WHEN E_PASSWORD_VALID THEN
        DBMS_OUTPUT.PUT_LINE('PASSWORD SHOULD HAVE AT LEAST 8 CHARACTERS');
    WHEN E_EMAIL_EXISTS THEN
        DBMS_OUTPUT.PUT_LINE('EMAIL ID ALREADY EXISTS. PLEASE SIGN-IN DIRECTLTY');
    WHEN E_CONTACT_NO_EXISTS THEN
        DBMS_OUTPUT.PUT_LINE('CONTACT NO ALREADY EXISTS. PLEASE SIGN-IN DIRECTLY');
    WHEN E_CONTACT_NO_LENGTH THEN
        DBMS_OUTPUT.PUT_LINE('PLEASE INPUT VALID CONTACT NUMBER');
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END ADD_DELIVERY_AGENT;
/


-- Stored procedure to add vehicles

CREATE OR REPLACE PROCEDURE add_vehicle (
    IN_VEHICLE_NUMBER NUMBER,
    IN_TYPE VARCHAR2,
    IN_CONTACT_NO NUMBER
) AS
    V_AGENT_ID NUMBER;
    v_count_id NUMBER;
    v_count_number NUMBER;
    e_vehicle_exists EXCEPTION;
    v_seq_val NUMBER; -- Variable to store the current sequence value
BEGIN
    -- Store the current sequence value in a variable
    SELECT DELIVERY_VEHICLE_SEQ.NEXTVAL INTO v_seq_val FROM DUAL;

    -- Check if the VEHICLE_ID already exists
    SELECT COUNT(1) INTO v_count_id FROM VEHICLE WHERE VEHICLE_ID = v_seq_val;

    IF v_count_id > 0 THEN
        -- If the vehicle ID already exists, raise an exception
        RAISE e_vehicle_exists;
    END IF;

    -- Check if the VEHICLE_NUMBER already exists
    SELECT COUNT(1) INTO v_count_number FROM VEHICLE WHERE VEHICLE_NUMBER = IN_VEHICLE_NUMBER;

    IF v_count_number > 0 THEN
        -- If the vehicle number already exists, raise an exception
        RAISE e_vehicle_exists;
    END IF;

    -- Attempt to fetch the AGENT_ID from DELIVERY_AGENT table
    SELECT AGENT_ID INTO V_AGENT_ID FROM DELIVERY_AGENT WHERE CONTACT_NO = IN_CONTACT_NO;

    -- Insert data into the VEHICLE table using the stored sequence value for VEHICLE_ID
    INSERT INTO VEHICLE (VEHICLE_ID, VEHICLE_NUMBER, TYPE, AGENT_ID)
    VALUES (v_seq_val, IN_VEHICLE_NUMBER, INITCAP(IN_TYPE), V_AGENT_ID);

    -- Commit the transaction
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('VEHICLE ADDED SUCCESSFULLY');

EXCEPTION
    WHEN e_vehicle_exists THEN
        DBMS_OUTPUT.PUT_LINE('VEHICLE ID or NUMBER Already Exists');
    WHEN NO_DATA_FOUND THEN
        -- Handle exception if no data is found
        DBMS_OUTPUT.PUT_LINE('Vehicle not found');
    WHEN OTHERS THEN
        -- Handle other exceptions and print the error message
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END add_vehicle;
/

-- Stored procedure to add orders from users

create or replace procedure ADD_ORDER(
    PI_COLLECT_CONTACT_NO NUMBER, 
    PI_COLLECT_STREET_ADDRESS VARCHAR, 
    PI_COLLECT_ZIP_CODE NUMBER, 
    PI_STATE VARCHAR, 
    PI_CITY VARCHAR, 
    PI_DELIVERY_ZIP_CODE NUMBER, 
    PI_DELIVERY_STREET_ADDRESS VARCHAR, 
    PI_DELIVERY_PERSON_NAME VARCHAR, 
    PI_DELIVERY_CONTACT_NO NUMBER, 
    PI_COLLECT_PERSON_NAME VARCHAR, 
    PI_ORDER_INSTRUCTIONS VARCHAR, 
    PI_CUST_ID NUMBER
) AS

INVALID_CUSTOMER EXCEPTION;
V_CUST NUMBER;

begin

SELECT COUNT(CUST_ID) INTO V_CUST FROM CUSTOMER WHERE CUST_ID = PI_CUST_ID;
    IF V_CUST = 0 THEN
        RAISE INVALID_CUSTOMER;
    END IF;
    
    INSERT INTO ORDERS(
        COLLECT_CONTACT_NO,
        COLLECT_STREET_ADDRESS,
        COLLECT_ZIP_CODE,
        STATE,
        CITY,
        DELIVERY_ZIP_CODE,
        DELIVERY_STREET_ADDRESS,
        DELIVERY_PERSON_NAME,
        DELIVERY_CONTACT_NO,
        COLLECT_PERSON_NAME,
        ORDER_ID,
        CUST_ID,
        ORDER_INSTRUCTIONS
    ) VALUES (
        PI_COLLECT_CONTACT_NO,
        PI_COLLECT_STREET_ADDRESS,
        PI_COLLECT_ZIP_CODE,
        PI_STATE,
        PI_CITY,
        PI_DELIVERY_ZIP_CODE,
        PI_DELIVERY_STREET_ADDRESS,
        PI_DELIVERY_PERSON_NAME,
        PI_DELIVERY_CONTACT_NO,
        PI_COLLECT_PERSON_NAME,
        ORDER_SEQ.NEXTVAL,
        PI_CUST_ID,
        PI_ORDER_INSTRUCTIONS
    );

    INSERT INTO ORDER_TRACKING(
        TRACKING_ID, 
        ORDER_STATUS,
        ORDER_ID
    ) VALUES (
        TRACKING_SEQ.NEXTVAL, 
        'INITIAL', 
        ORDER_SEQ.CURRVAL
    );

    DBMS_OUTPUT.PUT_LINE('ORDER Added');
    commit;
EXCEPTION
    WHEN  INVALID_CUSTOMER THEN
        DBMS_OUTPUT.PUT_LINE('Customer doest not exist');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
end ADD_ORDER;
/


--stored procedure for adding ITEMS

create or replace procedure ADD_ITEM(U_ORDER_ID NUMBER, ITEM_NAME varchar, SIZE_CATEGORY varchar)
AS
INVALID_SIZE EXCEPTION;
INVALID_ORDER_ID EXCEPTION;
V_SIZE varchar2(6);
V_ORDER_ID NUMBER;
begin
V_SIZE := UPPER(SIZE_CATEGORY);
IF
V_SIZE NOT IN ('SMALL', 'MEDIUM', 'LARGE') THEN 
RAISE INVALID_SIZE;
END IF;

SELECT COUNT(ORDER_ID) INTO V_ORDER_ID FROM ORDERS WHERE ORDER_ID = U_ORDER_ID;
    IF V_ORDER_ID = 0 THEN
        RAISE INVALID_ORDER_ID;
    END IF;

INSERT INTO ITEM VALUES(ITEM_SEQ.NEXTVAL, INITCAP(ITEM_NAME), V_SIZE, U_ORDER_ID);
    DBMS_OUTPUT.PUT_LINE('ITEM Added');
commit;
EXCEPTION
    WHEN INVALID_SIZE THEN
    DBMS_OUTPUT.PUT_LINE('INVALID SIZE, Please select from the list');
    WHEN INVALID_ORDER_ID THEN
    DBMS_OUTPUT.PUT_LINE('Invalid order_id');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
end ADD_ITEM;
/


-- Stored procedure for adding order amount

CREATE OR REPLACE PROCEDURE ADD_ORDER_AMOUNT(PI_ORDER_ID NUMBER)
AS
    INVALID_ORDER_ID EXCEPTION;
    V_ORDER_ID NUMBER;
BEGIN
    SELECT COUNT(ORDER_ID) INTO V_ORDER_ID FROM ORDERS WHERE ORDER_ID = PI_ORDER_ID;
    IF V_ORDER_ID = 0 THEN
        RAISE INVALID_ORDER_ID;
    END IF;

    UPDATE ORDERS 
    SET ORDER_AMOUNT = CALCULATE_ORDER_AMOUNT(PI_ORDER_ID)
    WHERE ORDER_ID = PI_ORDER_ID;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Order amount updated successfully');
EXCEPTION
    WHEN INVALID_ORDER_ID THEN
        DBMS_OUTPUT.PUT_LINE('OrderID does not exist');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END ADD_ORDER_AMOUNT;
/

-- Stored procedure to add order tracking

CREATE OR REPLACE PROCEDURE ADD_ORDER_TRACKING (
    PI_ORDER_ID ORDER_TRACKING.ORDER_ID%TYPE,
    PI_ORDER_STATUS ORDER_TRACKING.ORDER_STATUS%TYPE
) AS
    E_ORDER_STATUS_CHECK EXCEPTION;
    E_ORDER_ID_CHECK EXCEPTION;
    V_COUNT_ORDER_ID NUMBER;
BEGIN
    IF PI_ORDER_STATUS NOT IN ('INITIAL', 'MATCHING_DRIVER', 'DRIVER_MATCHED', 'PLACED', 'PICKED', 'DELIVERED', 'CANCELLED') THEN
        RAISE E_ORDER_STATUS_CHECK;
    END IF;
    
    SELECT COUNT(ORDER_ID) INTO V_COUNT_ORDER_ID FROM ORDERS WHERE ORDER_ID = PI_ORDER_ID;
    IF V_COUNT_ORDER_ID = 0 THEN
        RAISE E_ORDER_ID_CHECK;
    END IF;
    
    INSERT INTO ORDER_TRACKING VALUES (
        TRACKING_SEQ.NEXTVAL,
        UPPER(PI_ORDER_STATUS),
        SYSTIMESTAMP,
        PI_ORDER_ID
    );
    
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('ORDER TRACKING ADDED SUCCESSFULLY');
EXCEPTION
    WHEN E_ORDER_STATUS_CHECK THEN
        DBMS_OUTPUT.PUT_LINE('PLEASE ENTER A VALID ORDER STATUS');
    WHEN E_ORDER_ID_CHECK THEN
        DBMS_OUTPUT.PUT_LINE('ORDER DOES NOT EXISTS');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END ADD_ORDER_TRACKING;
/


--Stored procedure to add agent id (matching driver)
CREATE OR REPLACE PROCEDURE MATCH_DRIVER(PI_ORDER_ID NUMBER, PI_AGENT_ID NUMBER)
AS
    INVALID_AGENT EXCEPTION;
    V_AGENT_ID NUMBER;
BEGIN
    SELECT COUNT(AGENT_ID) INTO V_AGENT_ID FROM DELIVERY_AGENT WHERE AGENT_ID = PI_AGENT_ID;

    IF V_AGENT_ID = 0 THEN
        RAISE INVALID_AGENT;
    END IF;

    UPDATE ORDERS 
    SET AGENT_ID = PI_AGENT_ID
    WHERE ORDER_ID = PI_ORDER_ID;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('AGENT MATCHED SUCCESSFULLY');
EXCEPTION
    WHEN INVALID_AGENT THEN
        DBMS_OUTPUT.PUT_LINE('AGENT NOT FOUND');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END MATCH_DRIVER;
/

-- Stored procedure to update payment status
CREATE OR REPLACE PROCEDURE UPDATE_PAYMENT_STATUS(
    PI_ORDER_ID NUMBER,
    PI_PAYMENT_STATUS VARCHAR
) AS
    INVALID_ORDER EXCEPTION;
    INVALID_STATUS EXCEPTION;
    V_ORDER_ID NUMBER;
BEGIN
    IF UPPER(PI_PAYMENT_STATUS) NOT IN ('FAILED', 'SUCCESSFUL', 'REFUNDED') THEN
        RAISE INVALID_STATUS;
    END IF;
    
    SELECT COUNT(ORDER_ID) INTO V_ORDER_ID FROM ORDERS WHERE ORDER_ID = PI_ORDER_ID;
    
    IF V_ORDER_ID = 0 THEN
        RAISE INVALID_ORDER;
    END IF;
    
    BEGIN
        UPDATE ORDERS SET PAYMENT_STATUS = UPPER(PI_PAYMENT_STATUS) WHERE ORDER_ID = PI_ORDER_ID;
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Payment status updated');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error updating payment status: ' || SQLERRM);
            ROLLBACK;
    END;
    
EXCEPTION
    WHEN INVALID_STATUS THEN
        DBMS_OUTPUT.PUT_LINE('PLEASE ENTER A VALID PAYMENT STATUS');
    WHEN INVALID_ORDER THEN
        DBMS_OUTPUT.PUT_LINE('ORDER DOES NOT EXIST');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Unexpected error: ' || SQLERRM);
END UPDATE_PAYMENT_STATUS;
/

-- Stored Procedure to add feedback,rating,tips

CREATE OR REPLACE PROCEDURE ADD_FEEDBACK (
    PI_ORDER_ID NUMBER,
    PI_FEEDBACK VARCHAR2,
    PI_RATING NUMBER,
    PI_TIPS NUMBER
)
AS
    INVALID_ORDER EXCEPTION;
    V_ORDER_ID NUMBER;
BEGIN
    SELECT COUNT(ORDER_ID) INTO V_ORDER_ID FROM ORDERS WHERE ORDER_ID = PI_ORDER_ID;

    IF V_ORDER_ID = 0 THEN
        RAISE INVALID_ORDER;
    END IF;

    UPDATE ORDERS 
    SET FEEDBACK = INITCAP(PI_FEEDBACK),
        RATING = PI_RATING,
        TIP_TO_AGENT = PI_TIPS
    WHERE ORDER_ID = PI_ORDER_ID;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('FEEDBACK ADDED SUCCESSFULLY');
EXCEPTION
    WHEN INVALID_ORDER THEN
        DBMS_OUTPUT.PUT_LINE('Order_id not found');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END ADD_FEEDBACK;
/

